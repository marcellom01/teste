{
  "name": "AG MCP",
  "nodes": [
    {
      "id": "webhook1",
      "name": "Webhook Receber ID",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [100, 200],
      "parameters": {
        "httpMethod": "POST",
        "path": "ag-mcp",
        "responseMode": "onReceived",
        "responseData": "firstEntryJson"
      }
    },
    {
      "id": "mysql1",
      "name": "Buscar Reportagem",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [300, 200],
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT texto FROM noticias WHERE id = {{ $json.id_noticia }}"
      }
    },
    {
      "id": "openai1",
      "name": "Analisar como Editor",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [500, 200],
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Você é um editor experiente de jornal. Analise o texto fornecido e identifique diferentes ganchos jornalísticos que podem gerar novas reportagens. Para cada gancho, forneça: 1) O gancho identificado, 2) O ângulo da nova reportagem, 3) O público-alvo. Retorne em formato JSON estruturado."
            },
            {
              "role": "user",
              "content": "Analise esta reportagem e encontre ganchos para novas matérias:\n\n{{ $('Buscar Reportagem').item.json.texto }}"
            }
          ]
        }
      }
    },
    {
      "id": "code1",
      "name": "Processar Ganchos",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 200],
      "parameters": {
        "jsCode": "// Processar a resposta da IA e criar itens para cada gancho\nconst aiResponse = $input.first().json.choices[0].message.content;\n\ntry {\n  // Tentar parsear como JSON\n  let ganchos;\n  if (aiResponse.includes('{')) {\n    const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      ganchos = JSON.parse(jsonMatch[0]);\n    }\n  }\n  \n  // Se não conseguir parsear, criar estrutura baseada no texto\n  if (!ganchos || !ganchos.ganchos) {\n    // Dividir por linhas e criar ganchos\n    const linhas = aiResponse.split('\\n').filter(linha => linha.trim());\n    ganchos = {\n      ganchos: linhas.map((linha, index) => ({\n        id: index + 1,\n        gancho: linha.trim(),\n        angulo: `Nova perspectiva sobre: ${linha.trim().substring(0, 50)}...`,\n        publico: 'Público geral'\n      }))\n    };\n  }\n  \n  // Criar um item para cada gancho\n  const items = ganchos.ganchos.map((gancho, index) => ({\n    json: {\n      gancho_id: index + 1,\n      gancho: gancho.gancho || gancho,\n      angulo: gancho.angulo || `Reportagem ${index + 1}`,\n      publico: gancho.publico || 'Público geral',\n      texto_original: $('Buscar Reportagem').item.json.texto\n    }\n  }));\n  \n  return items;\n  \n} catch (error) {\n  // Em caso de erro, criar pelo menos um item\n  return [{\n    json: {\n      gancho_id: 1,\n      gancho: 'Análise geral da reportagem',\n      angulo: 'Nova perspectiva sobre o tema',\n      publico: 'Público geral',\n      texto_original: $('Buscar Reportagem').item.json.texto,\n      ai_response: aiResponse\n    }\n  }];\n}"
      }
    },
    {
      "id": "openai2",
      "name": "Gerar Novas Reportagens",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [900, 200],
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Você é um jornalista experiente. Com base no gancho fornecido e no texto original, crie uma nova reportagem completa, bem estruturada, com título, lead e desenvolvimento. A reportagem deve ter entre 300-500 palavras e manter a qualidade jornalística."
            },
            {
              "role": "user",
              "content": "GANCHO: {{ $json.gancho }}\nÂNGULO: {{ $json.angulo }}\nPÚBLICO-ALVO: {{ $json.publico }}\n\nTEXTO ORIGINAL:\n{{ $json.texto_original }}\n\nCrie uma nova reportagem explorando este gancho:"
            }
          ]
        }
      }
    },
    {
      "id": "code2",
      "name": "Formatar Resultado Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 200],
      "parameters": {
        "jsCode": "// Coletar todas as reportagens geradas e formatar resultado final\nconst reportagens = [];\n\n// Processar cada item de entrada (cada reportagem gerada)\nfor (const item of $input.all()) {\n  const novaReportagem = {\n    gancho_id: item.json.gancho_id,\n    gancho_original: item.json.gancho,\n    angulo: item.json.angulo,\n    publico_alvo: item.json.publico,\n    reportagem_gerada: item.json.choices[0].message.content,\n    timestamp: new Date().toISOString()\n  };\n  \n  reportagens.push(novaReportagem);\n}\n\n// Retornar resultado consolidado\nreturn [{\n  json: {\n    workflow: 'AG MCP',\n    total_reportagens_geradas: reportagens.length,\n    reportagens: reportagens,\n    processado_em: new Date().toISOString()\n  }\n}];"
      }
    },
    {
      "id": "webhook_response",
      "name": "Resposta Final",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1300, 200],
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": 200
      }
    }
  ],
  "connections": {
    "Webhook Receber ID": {
      "main": [
        [
          {
            "node": "Buscar Reportagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Reportagem": {
      "main": [
        [
          {
            "node": "Analisar como Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analisar como Editor": {
      "main": [
        [
          {
            "node": "Processar Ganchos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Ganchos": {
      "main": [
        [
          {
            "node": "Gerar Novas Reportagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gerar Novas Reportagens": {
      "main": [
        [
          {
            "node": "Formatar Resultado Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Resultado Final": {
      "main": [
        [
          {
            "node": "Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
